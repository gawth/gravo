6. Code review to get rid of any dodgy bits
6b. Code coverage and update tests where appropriate
6c. Review file structures
6d. Consider getting rid of any globals, e.g. hitURL
7. Need usable output from running gravo - see below OUTPUT
10. Need some validation in config to ensure various interdependent config items are put together - possibly include some sensible defaults
12. Need to allow command line options - especially for which config file to use
13.


DONE
8. Allow addition of a validator - eval a user specified regex on the output
11. Extend verbose to dump out return from service calls - already a feature!
9b. Support for http verbs other than GET - See VERBS section below..a35d2fdcfbd57269e75aae596be545a9b190ba3c
9a. Get rid of references to soap as its actually related to the likes of post - 7cab1abd4292b7cdceedb12177d4c1a8aba4c5d8
6a. Run golang tools to validate code - 9c8efb5b0eff06793b99445ab262da9e097dc820
6d. Clean out junk from gravo - 9c8efb5b0eff06793b99445ab262da9e097dc820
5. Plumb interfaces for SOAP handling
5a. Write tests for iterator
5b. Update config (and tests) to correctly load and parse the template
5c. Construct the soap iterator with the template from the config
5d. Call the soap iterator
4a. Need to add a new method to soap iterator that includes a check on whether slices are correct length - commit e44c4c1d607cf26f7ddb95223c16f0886a9a3e65
3. Finish off support for URL file
1. Try a soap endpoint
2. Extend for different http verbs
4. Plumb interfaces for URL handling


VERBS
Currently support GET and POST.  For POST I assume its soap related with a single URL.  For GET its multiple URLs...
Can we shift to a mode where we infer what behaviour is required.  The config specifies the verb.  Then iterate over both the URLs and the data...
What to do when one of them runs out?  Does a single URL imply repeatedly calling that URL?
Currently for SOAP we construct the URL from the config.

For now the simplest thing is to rename SOAP and extend to support any verb.  Same for URL.
Can then use the "SOAP" flag to determine behavior...

OUTPUT
Write a new output handler that does the following:
- Captures the output as a timestamp (start of the request) plus time take to respond
- Streams that output to file as a simple CSV using the start of the run to help make the file unique
- Keep the data in memory
- Spin up a web server that serves up the Highlight template with a json call to a data endpoint on local host
- Provide a json endpoint for use by the web template
- Work out how to update the graph via ajax calls
- Pass in a command line flag that specifies a data file for display - don't run the test, just display
- Of course the http.ListenAndServe is a blocking call.  Need to change the output handler to be a separate go routine.
- The routine will probably need a "have you finished" channel.  The main thread can then wait for that.  At some point
I can then add a "finish" to the web interface.
  In the stats handler we can fire up the web server on a goroutine
  The hanlder needs access to the data being populated by the perf test.  Should do this via a channel to
  ensure data is shared appropriately
